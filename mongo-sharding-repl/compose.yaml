name: mongo-sharding-repl
services:
  # сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард 1-я релика
  shard1-replica1:
    image: mongo:latest
    container_name: shard1-replica1
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - shard1-replica1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард 2-я релика
  shard1-replica2:
    image: mongo:latest
    container_name: shard1-replica2
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard1-replica2-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард 3-я релика
  shard1-replica3:
    image: mongo:latest
    container_name: shard1-replica3
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard1-replica3-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  # 2-й шард 1-я релика
  shard2-replica1:
    image: mongo:latest
    container_name: shard2-replica1
    restart: always
    ports:
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - shard2-replica1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # 2-й шард 2-я релика
  shard2-replica2:
    image: mongo:latest
    container_name: shard2-replica2
    restart: always
    ports:
      - "27025:27025"
    networks:
      app-network:
        ipv4_address: 173.17.0.15
    volumes:
      - shard2-replica2-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27025"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # 2-й шард 3-я релика
  shard2-replica3:
    image: mongo:latest
    container_name: shard2-replica3
    restart: always
    ports:
      - "27026:27026"
    networks:
      app-network:
        ipv4_address: 173.17.0.16
    volumes:
      - shard2-replica3-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27026"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos", # обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27017", # передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
    
  # приложение
  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-replica1-data:
  shard1-replica2-data:
  shard1-replica3-data:
  shard2-replica1-data:
  shard2-replica2-data:
  shard2-replica3-data: